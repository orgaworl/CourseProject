#include"SM4.h"
#include"iostream"
using namespace std;

//uint8 FK[4][4] = {
//	{0xA3,0XB1,0XBA,0XC6 },
//	{0x56,0xAA,0x33,0x50 },
//	{0x67,0x7D,0x91,0x97 },
//	{0xB2,0x70,0x22,0xDC }
//};

void testSM4Function()
{

    //uint32 key[4] = {0x01234567,0x89012345,0x67890123,0x45678901};
    //uint32 key[4] = {0x11111111,0x00000000,0x10101010,0x01010101};
    uint8 plain[16] = { 0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef, 0xfe,0xdc,0xba,0x98 ,0x76,0x54,0x32,0x10 };
    uint8 K[16] = { 0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef, 0xfe,0xdc,0xba,0x98 ,0x76,0x54,0x32,0x10 };
    //uint8 K[17] = "2021004601160000";
    uint8* cipher=SM4Encrypt(plain, K);
    for (int i=0;i<16;i++)
    {
        printf("%02X ", cipher[i]);
    }
}
uint32 FK[4] = {
	0xA3B1BAC6 ,
	0x56AA3350 ,
	0x677D9197 ,
	0xB27022DC 
};

uint32 passSBox(uint32 temp32bit)
{
    uint32 passSBOX = 0;
    passSBOX = SM4SBox[(uint8)temp32bit];
    passSBOX += SM4SBox[uint8(temp32bit >> 8)] << 8;
    passSBOX += SM4SBox[uint8(temp32bit >> 16)] << 16;
    passSBOX += SM4SBox[uint8(temp32bit >> 24)] << 24;

    return passSBOX;
}

uint8* SM4Encrypt(uint8 plaintext[16],uint8 K[16])
{

    //0.预处理
    //   明文16*8bit->4*32bit
    //   根据K 计算k0-k3
    uint32 XSet[4];
    uint32 key[4];
    uint32* RoundKeySet;
    for (int i = 0; i < 4; i++)
    {
        XSet[i] = (plaintext[4 * i] << 24) + (plaintext[4 * i + 1] << 16) + (plaintext[4 * i + 2] << 8) + (plaintext[4 * i + 3]);
        key[i] = (K[4 * i] << 24) + (K[4 * i + 1] << 16) + (K[4 * i + 2] << 8) + (K[4 * i + 3]);
    }


    //1. 生成轮密钥:  
    RoundKeySet = SM4KeyGenerate(key);

    for (int i = 0; i < 36; i++)
    {
        printf("%2d %08x\n",i, RoundKeySet[i]);
        
    }
    //2. 进行32轮轮函数
    
    uint32 temp32bit = 0;
    uint32 passSB = 0;
    uint32 passL = 0;
    for (int i=4;i<36;i++)
    {
        //2.1 计算
        uint32 X0 = XSet[0];

        //S
        temp32bit = XSet[1] ^ XSet[2] ^ XSet[3]^RoundKeySet[i];
        passSB = passSBox(temp32bit);

        //L
        passL = passSB;
        passL ^= (passSB << 2) + (passSB >> 30);
        passL ^= (passSB << 10) + (passSB >> 22);
        passL ^= (passSB << 18) + (passSB >> 14);
        passL ^= (passSB << 24) + (passSB >> 8);
        X0 ^= passL;

        //2.2 移动位置(待优化)
        XSet[0] = XSet[1];
        XSet[1] = XSet[2];
        XSet[2] = XSet[3];
        XSet[3] = X0;
    }


    //3, 进行反序变化
    //uint32* YSet = new uint32[4];
    //YSet[0] = XSet[3];
    //YSet[1] = XSet[2];
    //YSet[2] = XSet[1];
    //YSet[3] = XSet[0];

    uint8* cipher = new uint8[16];
    for (int i=0;i<16;i++)
    {
        cipher[i] = XSet[3 - (i / 4)]>>((3-i%4)*8);
    }

    return cipher;

}

uint8  SM4SBox[256] = {
        0xD6, 0x90, 0xE9, 0xFE, 0xCC, 0xE1, 0x3D, 0xB7, 0x16, 0xB6, 0x14, 0xC2, 0x28, 0xFB, 0x2C, 0x05, 0x2B, 0x67, 0x9A,
        0x76, 0x2A, 0xBE, 0x04, 0xC3, 0xAA, 0x44, 0x13, 0x26, 0x49, 0x86, 0x06, 0x99, 0x9C, 0x42, 0x50, 0xF4, 0x91, 0xEF,
        0x98, 0x7A, 0x33, 0x54, 0x0B, 0x43, 0xED, 0xCF, 0xAC, 0x62, 0xE4, 0xB3, 0x1C, 0xA9, 0xC9, 0x08, 0xE8, 0x95, 0x80,
        0xDF, 0x94, 0xFA, 0x75, 0x8F, 0x3F, 0xA6, 0x47, 0x07, 0xA7, 0xFC, 0xF3, 0x73, 0x17, 0xBA, 0x83, 0x59, 0x3C, 0x19,
        0xE6, 0x85, 0x4F, 0xA8, 0x68, 0x6B, 0x81, 0xB2, 0x71, 0x64, 0xDA, 0x8B, 0xF8, 0xEB, 0x0F, 0x4B, 0x70, 0x56, 0x9D,
        0x35, 0x1E, 0x24, 0x0E, 0x5E, 0x63, 0x58, 0xD1, 0xA2, 0x25, 0x22, 0x7C, 0x3B, 0x01, 0x21, 0x78, 0x87, 0xD4, 0x00,
        0x46, 0x57, 0x9F, 0xD3, 0x27, 0x52, 0x4C, 0x36, 0x02, 0xE7, 0xA0, 0xC4, 0xC8, 0x9E, 0xEA, 0xBF, 0x8A, 0xD2, 0x40,
        0xC7, 0x38, 0xB5, 0xA3, 0xF7, 0xF2, 0xCE, 0xF9, 0x61, 0x15, 0xA1, 0xE0, 0xAE, 0x5D, 0xA4, 0x9B, 0x34, 0x1A, 0x55,
        0xAD, 0x93, 0x32, 0x30, 0xF5, 0x8C, 0xB1, 0xE3, 0x1D, 0xF6, 0xE2, 0x2E, 0x82, 0x66, 0xCA, 0x60, 0xC0, 0x29, 0x23,
        0xAB, 0x0D, 0x53, 0x4E, 0x6F, 0xD5, 0xDB, 0x37, 0x45, 0xDE, 0xFD, 0x8E, 0x2F, 0x03, 0xFF, 0x6A, 0x72, 0x6D, 0x6C,
        0x5B, 0x51, 0x8D, 0x1B, 0xAF, 0x92, 0xBB, 0xDD, 0xBC, 0x7F, 0x11, 0xD9, 0x5C, 0x41, 0x1F, 0x10, 0x5A, 0xD8, 0x0A,
        0xC1, 0x31, 0x88, 0xA5, 0xCD, 0x7B, 0xBD, 0x2D, 0x74, 0xD0, 0x12, 0xB8, 0xE5, 0xB4, 0xB0, 0x89, 0x69, 0x97, 0x4A,
        0x0C, 0x96, 0x77, 0x7E, 0x65, 0xB9, 0xF1, 0x09, 0xC5, 0x6E, 0xC6, 0x84, 0x18, 0xF0, 0x7D, 0xEC, 0x3A, 0xDC, 0x4D,
        0x20, 0x79, 0xEE, 0x5F, 0x3E, 0xD7, 0xCB, 0x39, 0x48
};

uint32* SM4KeyGenerate(uint32 key[4])
{


	//开辟36*1*32bit的堆区数组
	uint32* RoundKeySet=new uint32[36];
    RoundKeySet[0] = key[0] ^ FK[0];
    RoundKeySet[1] = key[1] ^ FK[1];
    RoundKeySet[2] = key[2] ^ FK[2];
    RoundKeySet[3] = key[3] ^ FK[3];
    uint32 temp32bit = 0;
    uint32 passSBOX = 0;
    uint32 passL = 0;
    uint8 ckSet[4] = { 0x00,0x07,0x0E,0x15 };  //0 7 14 21
    uint32 ck = 0;
    for (int i = 4; i < 36; i++)
    {
        
        ck = (ckSet[0] << 24) + (ckSet[1] << 16 )+ (ckSet[2] << 8) + ckSet[3];

        temp32bit = RoundKeySet[i - 1] ^ RoundKeySet[i - 2] ^ RoundKeySet[i - 3] ^ ck;


        passSBOX = passSBox(temp32bit);
        //passSBOX  = SM4SBox[(uint8)temp32bit];
        //passSBOX += SM4SBox[uint8(temp32bit>> 8)]<< 8;
        //passSBOX += SM4SBox[uint8(temp32bit>>16)]<<16;
        //passSBOX += SM4SBox[uint8(temp32bit>>24)]<<24;


        //passL = passSBOX ^ (passSBOX << 13 + passSBOX >> 19) ^ (passSBOX << 23 + passSBOX >> 9);
        passL  = passSBOX ;
        passL ^= ((passSBOX << 13) + (passSBOX >> 19)) ;
        passL ^= ((passSBOX << 23) + (passSBOX >> 9));


        RoundKeySet[i] = RoundKeySet[i - 4] ^ passL;


        ckSet[0] += 28;
        ckSet[1] += 28;
        ckSet[2] += 28;
        ckSet[3] += 28;

    }

    return RoundKeySet;
}


//uint32* RoundFunction(uint32*XSet[4],)
//{
//    uint32* X0 = XSet[0];
//
//
//
//}